name: Release
on:
  push:
    branches:
      - 'release/v*'
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: true
      - name: Format Branch Name
        id: format
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          git fetch --tags
          echo ::set-output name=branch_name::$(echo "${GITHUB_REF}" | cut -d/ -f3-)
          echo ::set-output name=tag_name::$(echo "${GITHUB_REF}" | cut -d/ -f4-)
          echo ::set-output name=numeric_release::$(echo "${GITHUB_REF}" | cut -d/ -f4- | tr -d v)
          echo ::set-output name=release_name::"Release $(echo "${GITHUB_REF}" | cut -d/ -f4-)"
      - name: Use Node.js
        uses: actions/setup-node@v1
        env:
          RUNNER_TEMP: /tmp/runner
        with:
          node-version: 12
      - name: Install pnpm
        run: |
          npm install -g pnpm
      - name: Build Accelerator Installer
        id: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_DEFAULT_BRANCH: ${{ steps.format.outputs.branch_name }}
          INSTALLER_STACK_DIR: ./src/installer/cdk
          INSTALLER_STACK_NAME: AcceleratorInstaller
          OUTPUT_DIR: templates
        run: |
          cd "${INSTALLER_STACK_DIR}"
          pnpm install
          pnpx cdk synth --output "${OUTPUT_DIR}" "${INSTALLER_STACK_NAME}"
          echo ::set-output name=template_name::${INSTALLER_STACK_NAME}.template.json
          echo ::set-output name=template_path::$(realpath "${OUTPUT_DIR}/${INSTALLER_STACK_NAME}.template.json")
      - name: Generate Changelog
        id: changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_DEFAULT_BRANCH: ${{ steps.format.outputs.branch_name }}
        run: |
          previous_tag=$(git describe --tags --abbrev=0)
          echo "Previous release was: ${previous_tag}"
          changes=$(git log ${previous_tag}..HEAD --pretty="tformat:* %s (%h)" --first-parent)
          echo ${changes}
          changes="${changes//'%'/'%25'}"    # Avoids whitespace removal.
          changes="${changes//$'\n'/'%0A'}"
          changes="${changes//$'\r'/'%0D'}"
          echo ::set-output name=changelog::${changes}
      - name: Bump package.json
        run: |
          npm install -g json
          git config user.name github-actions
          git config user.email github-actions@github.com
          json -I -f src/core/cdk/package.json -e 'this.version="${{ steps.format.outputs.numeric_release }}"'
          git add src/core/cdk/package.json
          json -I -f src/installer/cdk/package.json -e 'this.version="${{ steps.format.outputs.numeric_release }}"'
          git add src/installer/cdk/package.json
          git commit -am 'Updating package to ${{ steps.format.outputs.numeric_release }}'
      - name: Push Bumped Package Files
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.ACTION_TOKEN }}
          branch: ${{ steps.format.outputs.branch_name }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.format.outputs.tag_name }}
          release_name: ${{ steps.format.outputs.release_name }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
          draft: true
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEMPLATE_PATH: ${{ steps.build.outputs.template_path }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.build.outputs.template_path }}
          asset_name: ${{ steps.build.outputs.template_name }}
          asset_content_type: application/json
      - name: Create Reference Directory
        id: reference
        run: |
          mkdir -p reference-material-${{ steps.format.outputs.numeric_release }}/docs
          mkdir -p reference-material-${{ steps.format.outputs.numeric_release }}/reference-artifacts
          echo ::set-output name=dir::"reference-material-${{ steps.format.outputs.numeric_release }}"
          echo ::set-output name=doc_dir::"reference-material-${{ steps.format.outputs.numeric_release }}/docs"
          echo ::set-output name=artifact_dir::"reference-material-${{ steps.format.outputs.numeric_release }}/reference-artifacts"
          echo ::set-output name=zip::"reference-material-${{ steps.format.outputs.numeric_release }}.zip"

      - name: Copy Sample Artifacts
        run: |
          cp reference-artifacts/config.example.json               ${{ steps.reference.outputs.artifact_dir }}
          cp reference-artifacts/Third-Party/firewall-example.txt  ${{ steps.reference.outputs.artifact_dir }}

      - name: Generate HTML (pbmm-architecture)
        uses: docker://pandoc/latex:2.10
        with:
          args: >
            --standalone --self-contained --from=gfm --title="" --css=gfm.css
            --resource-path=.:docs/architectures/pbmm:docs/installation:docs/operations
            --output=${{ steps.reference.outputs.doc_dir }}/pbmm-architecture.html
            docs/architectures/pbmm/index.md

      - name: Generate HTML (developer-guide)
        uses: docker://pandoc/latex:2.10
        with:
          args: >
            --standalone --self-contained --from=gfm --title="" --css=gfm.css
            --resource-path=.:docs/architectures/pbmm:docs/installation:docs/operations
            --output=${{ steps.reference.outputs.doc_dir }}/developer-guide.html
            docs/developer/developer-guide.md

      - name: Generate HTML (operations-troubleshooting-guide)
        uses: docker://pandoc/latex:2.10
        with:
          args: >
            --standalone --self-contained --from=gfm --title="" --css=gfm.css
            --resource-path=.:docs/architectures/pbmm:docs/installation:docs/operations
            --output=${{ steps.reference.outputs.doc_dir }}/operations-troubleshooting-guide.html
            docs/operations/operations-troubleshooting-guide.md

      - name: Generate HTML (customization-index)
        uses: docker://pandoc/latex:2.10
        with:
          args: >
            --standalone --self-contained --from=gfm --title="" --css=gfm.css
            --resource-path=.:docs/architectures/pbmm:docs/installation:docs/operations
            --output=${{ steps.reference.outputs.doc_dir }}/customization-index.html
            docs/installation/customization-index.md

      - name: Generate HTML (index)
        uses: docker://pandoc/latex:2.10
        with:
          args: >
            --standalone --self-contained --from=gfm --title="" --css=gfm.css
            --resource-path=.:docs/architectures/pbmm:docs/installation:docs/operations
            --output=${{ steps.reference.outputs.doc_dir }}/index.html
            docs/installation/index.md

      - name: Generate HTML (README)
        uses: docker://pandoc/latex:2.10
        with:
          args: >
            --standalone --self-contained --from=gfm --title="" --css=gfm.css
            --resource-path=.:docs/architectures/pbmm:docs/installation:docs/operations
            --output=${{ steps.reference.outputs.doc_dir }}/README.html
            README.md

      - name: Generate HTML (multi-file-config-capabilities)
        uses: docker://pandoc/latex:2.10
        with:
          args: >
            --standalone --self-contained --from=gfm --title="" --css=gfm.css
            --resource-path=.:docs/architectures/pbmm:docs/installation:docs/operations
            --output=${{ steps.reference.outputs.doc_dir }}/multi-file-config-capabilities.html
            docs/installation/multi-file-config-capabilities.md

      - name: Generate HTML (sample_snippets)
        uses: docker://pandoc/latex:2.10
        with:
          args: >
            --standalone --self-contained --from=gfm --title="" --css=gfm.css
            --resource-path=.:docs/architectures/pbmm:docs/installation:docs/operations
            --output=${{ steps.reference.outputs.doc_dir }}/sample_snippets.html
            ./reference-artifacts/master-config-sample-snippets/sample_snippets.md

      - name: Generate HTML (firewall_file_available_variables)
        uses: docker://pandoc/latex:2.10
        with:
          args: >
            --standalone --self-contained --from=gfm --title="" --css=gfm.css
            --resource-path=.:docs/architectures/pbmm:docs/installation:docs/operations
            --output=${{ steps.reference.outputs.doc_dir }}/firewall_file_available_variables.html
            ./reference-artifacts/master-config-sample-snippets/firewall_file_available_variables.md

      - name: Zip Reference Materials
        run: |
          zip -r ${{ steps.reference.outputs.zip }} ${{ steps.reference.outputs.dir }}/

      - uses: actions/upload-artifact@master
        with:
          name: ${{ steps.reference.outputs.zip }}
          path: ${{ steps.reference.outputs.zip }}
      - name: Upload Release Asset (Reference)
        id: upload-release-asset-ref
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEMPLATE_PATH: ${{ steps.reference.outputs.zip }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.reference.outputs.zip }}
          asset_name: ${{ steps.reference.outputs.zip }}
          asset_content_type: application/zip


      - name: Get Draft Release Url
        id: release_url
        run: |
          echo "Draft release available at: ${{ steps.create_release.outputs.html_url}}"

