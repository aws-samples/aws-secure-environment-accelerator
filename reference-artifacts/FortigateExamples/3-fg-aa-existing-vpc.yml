AWSTemplateFormatVersion: '2010-09-09'
Description: Firewall Instances for FortiGate AA for GC CAP (1.0)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: FortiGate Instance Configuration
        Parameters:
          - ParentStackName
          - InstanceType
          - CIDRForInstanceAccess
          - KeyPair
          - S3EndpointDeployment
          - InitS3Bucket
          - InitS3BucketRegion
          - LicenseType
          - FortiGate1LicenseFile
          - FortiGate2LicenseFile
          - PublicSubnet1RouterIP
          - PrivateSubnet1RouterIP
          - HAMgmtSubnet1RouterIP
          - PublicSubnet2RouterIP
          - PrivateSubnet2RouterIP
          - HAMgmtSubnet2RouterIP
      - Label:
          default: Interface IP Configuration for FortiGate 1
        Parameters:
          - FortiGate1PublicIP
          - FortiGate1PrivateIP
          - FortiGate1HAmgmtIP
          - FortiGate1DMZIP
      - Label:
          default: Interface IP Configuration for FortiGate 2
        Parameters:
          - FortiGate2PublicIP
          - FortiGate2PrivateIP
          - FortiGate2HAmgmtIP
          - FortiGate2DMZIP

Parameters:
  ParentStackName:
    Description: Firewall Security VPC CloudFormation Parent Stack Name
    Type: String
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    Default: FGVPC
  PublicSubnet1RouterIP:
    Type: String
    Default: "100.97.1.1"
    Description: Provide the IP address of the AWS intrinsic router (First IP from
      SubnetPublicZoneA)
  PrivateSubnet1RouterIP:
    Type: String
    Default: "100.97.1.161"
    Description: Provide the IP address of the AWS intrinsic router (First IP from
      SubnetPrivateZoneA)
  HAMgmtSubnet1RouterIP:
    Type: String
    Default: "100.97.1.129"
    Description: Provide the IP address of the AWS intrinsic router (First IP from
      SubnetManagementZoneA)
  DMZSubnet1RouterIP:
    Type: String
    Default: "100.97.0.1"
    Description: Provide the IP address of the AWS intrinsic router (First IP from
      SubnetDMZZoneA)
  PublicSubnet2RouterIP:
    Type: String
    Default: "100.97.1.65"
    Description: Provide the IP address of the AWS intrinsic router (First IP from
      SubnetPublicZoneB)
  PrivateSubnet2RouterIP:
    Type: String
    Default: "100.97.1.177"
    Description: Provide the IP address of the AWS intrinsic router (First IP from
      SubnetPrivateZoneB)
  HAMgmtSubnet2RouterIP:
    Type: String
    Default: "100.97.1.145"
    Description: Provide the IP address of the AWS intrinsic router (First IP from
      SubnetManagementZoneB)
  DMZSubnet2RouterIP:
    Type: String
    Default: "100.97.0.129"
    Description: Provide the IP address of the AWS intrinsic router (First IP from
      SubnetDMZZoneB)
  FortiGate1PublicIP:
    Type: String
    Default: "100.97.1.10/26"
    Description: Provide the IP address in CIDR form for the public interface of FortiGate1
      (IP from PublicSubnet1)
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: must be a valid CIDR block format.
  FortiGate1PrivateIP:
    Type: String
    Default: "100.97.1.170/28"
    Description: Provide the IP address in CIDR form for the private interface of
      FortiGate1 (IP from SubnetPrivateZoneA)
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: must be a valid CIDR block format.
  FortiGate1HAmgmtIP:
    Type: String
    Default: "100.97.1.138/28"
    Description: Provide the IP address in CIDR form for the HA management interface
      of FortiGate1 (IP from SubnetManagementZoneA)
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: must be a valid CIDR block format.
  FortiGate1DMZIP:
    Type: String
    Default: "100.97.0.10/28"
    Description: Provide the IP address in CIDR form for the DMZ interface
      of FortiGate1 (IP from SubnetDMZZoneA)
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: must be a valid CIDR block format.
  FortiGate2PublicIP:
    Type: String
    Default: "100.97.1.74/26"
    Description: Provide the IP address in CIDR form for the public interface of FortiGate2
      (IP from PublicSubnet1)
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: must be a valid CIDR block format.
  FortiGate2PrivateIP:
    Type: String
    Default: "100.97.1.186/28"
    Description: Provide the IP address in CIDR form for the private interface of
      FortiGate2 (IP from SubnetPrivateZoneB)
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: must be a valid CIDR block format.
  FortiGate2HAmgmtIP:
    Type: String
    Default: "100.97.1.154/28"
    Description: Provide the IP address in CIDR form for the HA management interface
      of FortiGate2 (IP from SubnetManagementZoneB)
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: must be a valid CIDR block format.
  FortiGate2DMZIP:
    Type: String
    Default: "100.97.0.138/28"
    Description: Provide the IP address in CIDR form for the DMZ interface
      of FortiGate2 (IP from SubnetDMZZoneB)
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: must be a valid CIDR block format.
  InstanceType:
    Type: String
    Default: c5n.xlarge
    Description: Select the instance type for the FortiGates
    AllowedValues:
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
  CIDRForInstanceAccess:
    Type: String
    Default: '0.0.0.0/0'
    Description: Provide a network CIDR from which the FortiGate instances will be
      accessed
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select a keypair to associate with the FortiGates
  S3EndpointDeployment:
    Type: String
    Description: Select if a new S3 Endpoint should be deployed or not. *** A S3 Endpoint
      should be used and associated to both PublicSubnets for successful bootstrapping
      ***
    AllowedValues:
      - DeployNew
      - UseExisting
  InitS3Bucket:
    Type: String
    MinLength: '1'
    Description: Provide the Init S3 Bucket name, where your config files will be
      created
  InitS3BucketRegion:
    Type: String
    Default: 'ca-central-1'
    Description: Select the Region where the Init S3 Bucket exists *** the bucket
      should exist in the same region as this deployment for successful bootstrapping
      ***
    AllowedValues:
      - ap-northeast-1
      - ap-northeast-2
      - ap-south-1
      - ap-southeast-1
      - ap-southeast-2
      - ca-central-1
      - eu-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - sa-east-1
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
  LicenseType:
    Type: String
    Description: Select the license type for the FortiGates
    AllowedValues:
      - PAYG
      - BYOL
  FortiGate1LicenseFile:
    Type: String
    Description: '[BYOL Only, leave blank for PAYG] Provide the name of the BYOL license
      file in the Init S3 Bucket for FortiGate1 (ie fgt1.lic or prefix/fgt1.lic)'
  FortiGate2LicenseFile:
    Type: String
    Description: '[BYOL Only, leave blank for PAYG] Provide the name of the BYOL license
      file in the Init S3 Bucket for FortiGate2 (ie fgt2.lic or prefix/fgt2.lic)'
Conditions:
  CreateS3Endpoint: !Equals
    - !Ref 'S3EndpointDeployment'
    - DeployNew
  LicenseTypeBYOL: !Equals
    - !Ref 'LicenseType'
    - BYOL



Resources:
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateS3Endpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource:
              - '*'
      RouteTableIds:
        - Fn::ImportValue: !Sub 'FGVPC-${ParentStackName}-RouteTablePublicSubnet'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId:
        Fn::ImportValue: !Sub 'FGVPC-${ParentStackName}-VPC'
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: FGCPPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:Describe*
                  - ec2:AssociateAddress
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                  - ec2:ReplaceRoute
                  - s3:GetObject
                Resource: '*'
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'InstanceRole'
  FortiGateSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub 'FGVPC-${ParentStackName}-VPC'
      GroupDescription: FortigateSecGrp
      SecurityGroupIngress:
        - Description: Allow remote access to FGT
          IpProtocol: '-1'
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref 'CIDRForInstanceAccess'
        - Description: Allow local VPC access to FGT
          IpProtocol: '-1'
          FromPort: 0
          ToPort: 65535
          CidrIp:
            Fn::ImportValue: !Sub 'FGVPC-${ParentStackName}-VPC-CIDRBLOCK'
  FortiGateSecGrpHArule:
    DependsOn: FortiGateSecGrp
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'FortiGateSecGrp'
      Description: Allow FGTs to access each other
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref 'FortiGateSecGrp'
  Fgt1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !GetAtt 'RunImageFunction.ami'
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'InstanceProfile'
      KeyName: !Ref 'KeyPair'
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref 'fgt1eni0'
          DeviceIndex: '0'
        - NetworkInterfaceId: !Ref 'fgt1eni1'
          DeviceIndex: '1'
        - NetworkInterfaceId: !Ref 'fgt1eni2'
          DeviceIndex: '2'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -FortiGate1
      UserData: !Base64
        Fn::Join:
          - ''
          - - "{\n"
            - '"bucket"'
            - ' : "'
            - !Ref 'InitS3Bucket'
            - '"'
            - ",\n"
            - '"region"'
            - ' : '
            - '"'
            - !Ref 'InitS3BucketRegion'
            - '"'
            - ",\n"
            - '"license"'
            - ' : '
            - '"'
            - /
            - !Ref 'FortiGate1LicenseFile'
            - '"'
            - ",\n"
            - '"config"'
            - ' : '
            - '"'
            - /fgt1.txt"
            - "\n"
            - '}'
  Fgt2:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !GetAtt 'RunImageFunction.ami'
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'InstanceProfile'
      KeyName: !Ref 'KeyPair'
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref 'fgt2eni0'
          DeviceIndex: '0'
        - NetworkInterfaceId: !Ref 'fgt2eni1'
          DeviceIndex: '1'
        - NetworkInterfaceId: !Ref 'fgt2eni2'
          DeviceIndex: '2'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -FortiGate2
      UserData: !Base64
        Fn::Join:
          - ''
          - - "{\n"
            - '''bucket'' : '''
            - !Ref 'InitS3Bucket'
            - "',\n"
            - '''region'' : '''
            - !Ref 'InitS3BucketRegion'
            - "',\n"
            - '''license'' : ''/'
            - !Ref 'FortiGate2LicenseFile'
            - "',\n"
            - "'config' : '/fgt2.txt'\n"
            - '}'
  fgt1eni0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: port1
      GroupSet:
        - !Ref 'FortiGateSecGrp'
      SourceDestCheck: false
      SubnetId: 
        Fn::ImportValue: !Sub 'FGVPC-${ParentStackName}-SubnetPublicZoneA'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -fgt1eni0
        - Key: Interface
          Value: eth0
      PrivateIpAddresses:
        - PrivateIpAddress: !Select
            - '0'
            - !Split
              - /
              - !Ref 'FortiGate1PublicIP'
          Primary: true
  fgt2eni0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: port1
      GroupSet:
        - !Ref 'FortiGateSecGrp'
      SourceDestCheck: false
      SubnetId: 
        Fn::ImportValue: !Sub 'FGVPC-${ParentStackName}-SubnetPublicZoneB'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -fgt2eni0
        - Key: Interface
          Value: eth0
      PrivateIpAddresses:
        - PrivateIpAddress: !Select
            - '0'
            - !Split
              - /
              - !Ref 'FortiGate2PublicIP'
          Primary: true
  Fgt1ClusterEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: Fgt1
  Fgt2ClusterEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: Fgt2    
  Fgt1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: Fgt1
  Fgt2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: Fgt2
  Fgt1ClusterIPASSOCIATION:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt 'Fgt1ClusterEIP.AllocationId'
      NetworkInterfaceId: !Ref 'fgt1eni0'
      PrivateIpAddress: !Select
        - '0'
        - !Split
          - /
          - !Ref 'FortiGate1PublicIP'
    DependsOn: Fgt1ClusterEIP
  Fgt2ClusterIPASSOCIATION:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt 'Fgt2ClusterEIP.AllocationId'
      NetworkInterfaceId: !Ref 'fgt2eni0'
      PrivateIpAddress: !Select
        - '0'
        - !Split
          - /
          - !Ref 'FortiGate2PublicIP'
    DependsOn: Fgt2ClusterEIP    
  fgt1eni1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: port2
      GroupSet:
        - !Ref 'FortiGateSecGrp'
      SourceDestCheck: false
      SubnetId: 
        Fn::ImportValue: !Sub 'FGVPC-${ParentStackName}-SubnetPrivateZoneA'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -fgt1eni1
      PrivateIpAddress: !Select
        - '0'
        - !Split
          - /
          - !Ref 'FortiGate1PrivateIP'
  fgt2eni1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: port2
      GroupSet:
        - !Ref 'FortiGateSecGrp'
      SourceDestCheck: false
      SubnetId: 
        Fn::ImportValue: !Sub 'FGVPC-${ParentStackName}-SubnetPrivateZoneB'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -fgt2eni1
      PrivateIpAddress: !Select
        - '0'
        - !Split
          - /
          - !Ref 'FortiGate2PrivateIP'
  fgt1eni2:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: port3
      GroupSet:
        - !Ref 'FortiGateSecGrp'
      SourceDestCheck: false
      SubnetId: 
        Fn::ImportValue: !Sub 'FGVPC-${ParentStackName}-SubnetManagementZoneA'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -fgt1eni2
      PrivateIpAddress: !Select
        - '0'
        - !Split
          - /
          - !Ref 'FortiGate1HAmgmtIP'
  fgt2eni2:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: port3
      GroupSet:
        - !Ref 'FortiGateSecGrp'
      SourceDestCheck: false
      SubnetId: 
        Fn::ImportValue: !Sub 'FGVPC-${ParentStackName}-SubnetManagementZoneB'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -fgt2eni2
      PrivateIpAddress: !Select
        - '0'
        - !Split
          - /
          - !Ref 'FortiGate2HAmgmtIP'
  fgt1eni3:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: port4
      GroupSet:
        - !Ref 'FortiGateSecGrp'
      SourceDestCheck: false
      SubnetId: 
        Fn::ImportValue: !Sub 'FGVPC-${ParentStackName}-SubnetDMZZoneA'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -fgt1eni3
      PrivateIpAddress: !Select
        - '0'
        - !Split
          - /
          - !Ref 'FortiGate1DMZIP'
  fgt2eni3:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: port4
      GroupSet:
        - !Ref 'FortiGateSecGrp'
      SourceDestCheck: false
      SubnetId: 
        Fn::ImportValue: !Sub 'FGVPC-${ParentStackName}-SubnetDMZZoneB'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -fgt2eni3
      PrivateIpAddress: !Select
        - '0'
        - !Split
          - /
          - !Ref 'FortiGate2DMZIP'
  Fgt1EIPASSOCIATION:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt 'Fgt1EIP.AllocationId'
      NetworkInterfaceId: !Ref 'fgt1eni2'
      PrivateIpAddress: !Select
        - '0'
        - !Split
          - /
          - !Ref 'FortiGate1HAmgmtIP'
    DependsOn: Fgt1EIP
  Fgt2EIPASSOCIATION:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt 'Fgt2EIP.AllocationId'
      NetworkInterfaceId: !Ref 'fgt2eni2'
      PrivateIpAddress: !Select
        - '0'
        - !Split
          - /
          - !Ref 'FortiGate2HAmgmtIP'
    DependsOn: Fgt2EIP
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: S3AccessRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - ec2:DescribeImages
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:*
                Resource: '*'
  ImageFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaRole
    Properties:
      Code:
        ZipFile: !Join
          - "\n"
          - - import boto3
            - import cfnresponse
            - import logging
            - import json
            - logger = logging.getLogger()
            - logger.setLevel(logging.INFO)
            - client = boto3.client('ec2')
            - ''
            - 'def handler(event, context):'
            - '    logger.info(''<-- event received: {}''.format(json.dumps(event)))'
            - '    try:'
            - '        resp = client.describe_images('
            - '            Filters=[{''Name'': ''name'', ''Values'': [event[''ResourceProperties''][''LicenseType'']]}],'
            - '            Owners=[''679593333241'']'
            - '        )'
            - '    except Exception as error:'
            - '        logger.error(''<--!! Exception: {}''.format(error))'
            - '        responseData = {''msg'':''error''}'
            - '        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)'
            - '    if resp[''ResponseMetadata''][''HTTPStatusCode''] == 200 and resp[''Images'']
              != []:'
            - '        ami_dict = {}'
            - '        ami_list = []'
            - '        for entry in resp[''Images'']:'
            - '            key = entry[''CreationDate'']'
            - '            ami_dict[key] = entry[''ImageId'']'
            - '        ami_list = sorted(ami_dict, reverse = True)'
            - '        logger.info(''--> found latest AMI: {}, {}''.format(ami_dict[ami_list[0]],
              ami_list[0]))'
            - '        responseData = {''ami'': ami_dict[ami_list[0]]}'
            - '        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)'
            - '    else:'
            - '        logger.error(''!!--> Unable to find AMI in response! {}''.format(resp))'
            - '        responseData = {''msg'':''error''}'
            - '        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)'
            - ''
      Role: !GetAtt 'LambdaRole.Arn'
      Timeout: 120
      Handler: index.handler
      Runtime: python2.7
      MemorySize: 128
  RunImageFunction:
    Type: Custom::ImageFunction
    DependsOn: ImageFunction
    Properties:
      ServiceToken: !GetAtt 'ImageFunction.Arn'
      LicenseType: !If
        - LicenseTypeBYOL
        - FortiGate-VM64-AWS *(6.2.3)*
        - FortiGate-VM64-AWSONDEMAND *(6.2.3)*
  InitFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaRole
    Properties:
      Code:
        ZipFile: !Join
          - "\n"
          - - import ast
            - import boto3
            - import cfnresponse
            - import json
            - import logging
            - logger = logging.getLogger()
            - logger.setLevel(logging.INFO)
            - s3 = boto3.client('s3')
            - ''
            - template = '''\
            - config system global
            - set hostname {Hostname}
            - set admintimeout 60
            - set vdom-mode split-vdom            
            - end
            - config system settings
            - set allow-subnet-overlap enable
            - end
            - config global
            - config system interface
            - edit port1
            - set vdom FG-traffic
            - set alias public
            - set mode static
            - set ip {Port1IP}
            - set allowaccess ping https ssh fgfm
            - set secondary-IP enable
            - set mtu-override enable
            - set mtu 9001            
            - next
            - edit port2
            - set vdom FG-traffic
            - set alias private
            - set mode static
            - set ip {Port2IP}
            - set allowaccess ping
            - set mtu-override enable
            - set mtu 9001
            - next
            - edit port3
            - set vdom root
            - set alias mgmt
            - set mode static
            - set ip {Port3IP}
            - set allowaccess ping https ssh fgfm
            - set mtu-override enable
            - set mtu 9001
            - next
            - edit port4
            - set vdom FG-traffic
            - set alias DMZ
            - set mode static
            - set ip {Port4IP}
            - set allowaccess ping
            - set mtu-override enable
            - set mtu 9001
            - next            
            - end
            - end
            - config vdom
            - edit FG-traffic
            - config router static
            - edit 1
            - set device port1
            - set gateway {PublicSubnetRouterIP}
            - next
            - edit 2
            - set dst {VPCCIDR}
            - set device port2
            - set gateway {PrivateSubnetRouterIP}
            - next
            - end
            - next
            - edit root
            - config router static
            - edit 1
            - set device port3
            - set gateway {HAmgmtSubnetRouterIP}
            - next            
            - end
            - end\
            - ''''''''
            - ''
            - 'def handler(event, context):'
            - '    dict1 = ast.literal_eval(event[''ResourceProperties''][''FGT1Info''])'
            - '    dict2 = ast.literal_eval(event[''ResourceProperties''][''FGT2Info''])'
            - '    fgt1_conf = template.format(**dict1)'
            - '    fgt2_conf = template.format(**dict2)'
            - '    fgt1_result = False'
            - '    fgt2_result = False'
            - '    logger.info(''<-- event received: {}''.format(json.dumps(event)))'
            - ''
            - '    try:'
            - '        resp = s3.put_object(Body=fgt1_conf, Bucket=event[''ResourceProperties''][''S3Bucket''],
              Key=''fgt1.txt'')'
            - '    except Exception as error:'
            - '        logger.error(''<--!! Exception: {}''.format(error))'
            - '        responseData = {''msg'':''error''}'
            - '        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)'
            - '    if resp[''ResponseMetadata''][''HTTPStatusCode''] == 200:'
            - '        fgt1_result = True'
            - '        logger.info(''<-- s3 put_object fgt1.txt successful'')'
            - ''
            - '    try:'
            - '        resp = s3.put_object(Body=fgt2_conf, Bucket=event[''ResourceProperties''][''S3Bucket''],
              Key=''fgt2.txt'')'
            - '    except Exception as error:'
            - '        logger.error(''<--!! Exception: {}''.format(error))'
            - '        responseData = {''msg'':''error''}'
            - '        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)'
            - '    if resp[''ResponseMetadata''][''HTTPStatusCode''] == 200:'
            - '        fgt2_result = True'
            - '        logger.info(''<-- s3 put_object fgt2.txt successful'')'
            - ''
            - '    if fgt1_result is True and fgt2_result is True:'
            - '        responseData = {''msg'':''200''}'
            - '        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)'
            - '    else:'
            - '        responseData = {''msg'':''error''}'
            - '        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)'
            - ''
      Role: !GetAtt 'LambdaRole.Arn'
      Timeout: 120
      Handler: index.handler
      Runtime: python2.7
      MemorySize: 128
  RunInitFunction:
    Type: Custom::InitFunction
    DependsOn: InitFunction
    Properties:
      ServiceToken: !GetAtt 'InitFunction.Arn'
      S3Bucket: !Ref 'InitS3Bucket'
      FGT1Info: !Join
        - ''
        - - '{'
          - '''VPCCIDR'':'''
          - Fn::ImportValue: !Sub 'FGVPC-${ParentStackName}-VPC-CIDRBLOCK'
          - ''','
          - '''HAmgmtSubnetRouterIP'':'''
          - !Ref 'HAMgmtSubnet1RouterIP'
          - ''','
          - '''PublicSubnetRouterIP'':'''
          - !Ref 'PublicSubnet1RouterIP'
          - ''','
          - '''PrivateSubnetRouterIP'':'''
          - !Ref 'PrivateSubnet1RouterIP'
          - ''','
          - '''Port1IP'':'''
          - !Ref 'FortiGate1PublicIP'
          - ''','
          - '''Port2IP'':'''
          - !Ref 'FortiGate1PrivateIP'
          - ''','
          - '''Port3IP'':'''
          - !Ref 'FortiGate1HAmgmtIP'
          - ''','
          - '''Port4IP'':'''
          - !Ref 'FortiGate1DMZIP'
          - ''','          
          - '''HApeer'':'''
          - !Select
            - '0'
            - !Split
              - /
              - !Ref 'FortiGate2PrivateIP'
          - ''','
          - '''HApriority'':''255'','
          - '''Hostname'':''Fgt1'''
          - '}'
      FGT2Info: !Join
        - ''
        - - '{'
          - '''VPCCIDR'':'''
          - Fn::ImportValue: !Sub 'FGVPC-${ParentStackName}-VPC-CIDRBLOCK'
          - ''','
          - '''HAmgmtSubnetRouterIP'':'''
          - !Ref 'HAMgmtSubnet2RouterIP'
          - ''','
          - '''PublicSubnetRouterIP'':'''
          - !Ref 'PublicSubnet2RouterIP'
          - ''','
          - '''PrivateSubnetRouterIP'':'''
          - !Ref 'PrivateSubnet2RouterIP'
          - ''','
          - '''Port1IP'':'''
          - !Ref 'FortiGate2PublicIP'
          - ''','
          - '''Port2IP'':'''
          - !Ref 'FortiGate2PrivateIP'
          - ''','
          - '''Port3IP'':'''
          - !Ref 'FortiGate2HAmgmtIP'
          - ''','
          - '''Port4IP'':'''
          - !Ref 'FortiGate2DMZIP'
          - ''','            
          - '''HApeer'':'''
          - !Select
            - '0'
            - !Split
              - /
              - !Ref 'FortiGate1PrivateIP'
          - ''','
          - '''HApriority'':''1'','
          - '''Hostname'':''Fgt2'''
          - '}'
Outputs:
  FortiGate1LoginURL:
    Value: !Join
      - ''
      - - https://
        - !Ref 'Fgt1EIP'
    Description: Login URL for the HAmgmt interface of FortiGate 1
  FortiGate2LoginURL:
    Value: !Join
      - ''
      - - https://
        - !Ref 'Fgt2EIP'
    Description: Login URL for the HAmgmt interface of FortiGate 2
  Username:   
    Value: admin
    Description: Username for the FortiGate firewalls
  PasswordFGT1:
    Value: !Ref 'Fgt1'
    Description: Initial password (and instanceID) for the FortiGate1
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-Fgt1"     
  PasswordFGT2:
    Value: !Ref 'Fgt2'
    Description: Initial password (and instanceID) for the FortiGate2
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-Fgt2"       
  Fgt1ClusterEIP:
    Value: !Ref 'Fgt1ClusterEIP'
    Description: EIP  for the public interface of the FortiGate1
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-Fgt1ClusterEIP"
  Fgt2ClusterEIP:
    Value: !Ref 'Fgt2ClusterEIP'
    Description: EIP  for the public interface of the FortiGate2
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-Fgt2ClusterEIP"       
  FortiGate1PublicIP:
    Value: !Ref 'FortiGate1PublicIP'
    Description: Internal IP  for the public interface of the FortiGate1
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-FortiGate1PublicIP" 
  FortiGate2PublicIP:
    Value: !Ref 'FortiGate2PublicIP'
    Description: Internal IP  for the public interface of the FortiGate2
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-FortiGate2PublicIP" 
  FortiGate1PrivateIP:
    Value: !Ref 'FortiGate1PrivateIP'
    Description: Internal IP  for the private interface of the FortiGate1
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-FortiGate1PrivateIP" 
  FortiGate2PrivateIP:
    Value: !Ref 'FortiGate2PrivateIP'
    Description: Internal IP  for the private interface of the FortiGate2
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-FortiGate2PrivateIP" 
  FortiGate1HAmgmtIP:
    Value: !Ref 'FortiGate1HAmgmtIP'
    Description: Internal IP  for the management interface of the FortiGate1
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-FortiGate1HAmgmtIP" 
  FortiGate2HAmgmtIP:
    Value: !Ref 'FortiGate2HAmgmtIP'
    Description: Internal IP  for the management interface of the FortiGate2
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-FortiGate2HAmgmtIP" 
  FortiGate1DMZIP:
    Value: !Ref 'FortiGate1DMZIP'
    Description: Internal IP  for the DMZ interface of the FortiGate1
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-FortiGate1DMZIP"
  FortiGate2DMZIP:
    Value: !Ref 'FortiGate2DMZIP'
    Description: Internal IP  for the DMZ interface of the FortiGate2
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-FortiGate2DMZIP"
  fgt1eni0:
    Value: !Ref 'fgt1eni0'
    Description: Internal public elastic network interface of the FortiGate1
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-fgt1eni0" 
  fgt2eni0:
    Value: !Ref 'fgt2eni0'
    Description: Internal public elastic network interface of the FortiGate2
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-fgt2eni0" 
  fgt1eni1:
    Value: !Ref 'fgt1eni1'
    Description: Internal private elastic network interface of the FortiGate1
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-fgt1eni1"
  fgt2eni1:
    Value: !Ref 'fgt2eni1'
    Description: Internal private elastic network interface of the FortiGate2
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-fgt2eni1"       
  fgt1eni2:
    Value: !Ref 'fgt1eni2'
    Description: Internal management elastic network interface of the FortiGate1
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-fgt1eni2"
  fgt2eni2:
    Value: !Ref 'fgt2eni2'
    Description: Internal management elastic network interface of the FortiGate2
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-fgt2eni2"     
  fgt1eni3:
    Value: !Ref 'fgt1eni3'
    Description: Internal DMZ elastic network interface of the FortiGate1
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-fgt1eni3"
  fgt2eni3:
    Value: !Ref 'fgt2eni3'
    Description: Internal DMZ elastic network interface of the FortiGate2
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-fgt2eni3"      
  PublicSubnet1RouterIP:
    Value: !Ref 'PublicSubnet1RouterIP'
    Description: AWS SDN Router IP of the public subnet of the FortiGate1
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-PublicSubnet1RouterIP"
  PublicSubnet2RouterIP:
    Value: !Ref 'PublicSubnet2RouterIP'
    Description: AWS SDN Router IP of the public subnet of the FortiGate2
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-PublicSubnet2RouterIP"       
  PrivateSubnet1RouterIP:
    Value: !Ref 'PrivateSubnet1RouterIP'
    Description: AWS SDN Router IP of the private subnet of the FortiGate1
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-PrivateSubnet1RouterIP"
  PrivateSubnet2RouterIP:
    Value: !Ref 'PrivateSubnet1RouterIP'
    Description: AWS SDN Router IP of the private subnet of the FortiGate2
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-PrivateSubnet2RouterIP"
  HAMgmtSubnet1RouterIP:
    Value: !Ref 'HAMgmtSubnet1RouterIP'
    Description: AWS SDN Router IP of the management subnet of the FortiGate1
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-HAMgmtSubnet1RouterIP"
  HAMgmtSubnet2RouterIP:
    Value: !Ref 'HAMgmtSubnet2RouterIP'
    Description: AWS SDN Router IP of the management subnet of the FortiGate2
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-HAMgmtSubnet2RouterIP"
  DMZSubnet1RouterIP:
    Value: !Ref 'DMZSubnet1RouterIP'
    Description: AWS SDN Router IP of the DMZ subnet of the FortiGate1
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-DMZSubnet1RouterIP"
  DMZSubnet2RouterIP:
    Value: !Ref 'DMZSubnet2RouterIP'
    Description: AWS SDN Router IP of the DMZ subnet of the FortiGate2
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-DMZSubnet2RouterIP"
  LicenseType:
    Value: !Ref 'LicenseType'
    Description: License type of the FortiGate firewalls
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-LicenseType"
  FortiGateSecGrp:
    Value: !Ref 'FortiGateSecGrp'
    Description: Security Group of the FortiGate firewalls
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-FortiGateSecGrp"
  InstanceRole:
    Value: !Ref 'InstanceRole'
    Description: InstanceRole of the FortiGate firewalls
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-InstanceRole"
  InstanceProfile:
    Value: !Ref 'InstanceProfile'
    Description: InstanceProfile of the FortiGate firewalls
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-InstanceProfile"
  InstanceType:
    Value: !Ref 'InstanceType'
    Description: Instance Type of the FortiGate firewalls
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-InstanceType"
  KeyPair:
    Value: !Ref 'KeyPair'
    Description: SSH KeyPair for the Instances of the FortiGate firewalls
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-KeyPair"
  CIDRForInstanceAccess:
    Value: !Ref 'CIDRForInstanceAccess'
    Description: CIDR for management access of the FortiGate firewalls
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-CIDRForInstanceAccess"
  InitS3Bucket:
    Value: !Ref 'InitS3Bucket'
    Description: S3 Bucket used
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-InitS3Bucket"
  InitS3BucketRegion:
    Value: !Ref 'InitS3BucketRegion'
    Description: Region of the S3 Bucket used
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-InitS3BucketRegion"
  S3Endpoint:
    Value: !Ref 'S3Endpoint'
    Description: S3 VPC Endpoint
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-S3Endpoint"
  ImageFunction:
    Value: !Ref 'ImageFunction'
    Description: Lambda Function ImageFunction
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-ImageFunction"
  InitFunction:
    Value: !Ref 'InitFunction'
    Description: Lambda Function InitFunction
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-InitFunction"
