AWSTemplateFormatVersion: "2010-09-09"
Description: "TGW VPN attachment for for FortiGate AA for GC CAP (1.0)"

Parameters:
  FGParentStackName:
    Description: Fortigate Firewall CloudFormation Parent Stack Name
    Type: String
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    Default: FGAA
    MinLength: 1
  VPCParentStackName:
    Description: Firewall Security VPC CloudFormation Parent Stack Name
    Type: String
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    Default: FGVPC
    MinLength: 1    
  VPNPreSharedSecret:
    Description: VPN Connections PreSharedKey
    Type: String
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    MinLength: 8
    NoEcho: true
  TransitGatewayID:
    Description: "TransitGateway ID"
    Type: String
  fgtVPNBgpAsn:
    Description: "BGP Autonomous Sytem Number to use on the FortiGate to connect to Transit Gateway"
    Type: String
    MinLength: 1


Resources:
  fgt1CustomerGateway:
    Type: AWS::EC2::CustomerGateway
    Properties:
      Type: ipsec.1
      BgpAsn: !Ref fgtVPNBgpAsn
      IpAddress: 
        Fn::ImportValue:
          Fn::Sub: "FGVPC-${FGParentStackName}-Fgt1ClusterEIP"      
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -Fgt1CustomerGateway
  fgt2CustomerGateway:
    Type: AWS::EC2::CustomerGateway
    Properties:
      Type: ipsec.1
      BgpAsn: !Ref fgtVPNBgpAsn
      IpAddress: 
        Fn::ImportValue:
          Fn::Sub: "FGVPC-${FGParentStackName}-Fgt2ClusterEIP"
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -Fgt2CustomerGateway
  fgt1TGWVPNConnection:
    Type: AWS::EC2::VPNConnection
    Properties:
      CustomerGatewayId: !Ref fgt1CustomerGateway
      StaticRoutesOnly: false
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -Fgt1TGWVPN
      TransitGatewayId: !Ref TransitGatewayID
      Type: ipsec.1
      VpnTunnelOptionsSpecifications:
        - PreSharedKey: !Ref VPNPreSharedSecret
  fgt2TGWVPNConnection:
    Type: AWS::EC2::VPNConnection
    Properties:
      CustomerGatewayId: !Ref fgt2CustomerGateway
      StaticRoutesOnly: false
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - -Fgt2TGWVPN
      TransitGatewayId: !Ref TransitGatewayID
      Type: ipsec.1
      VpnTunnelOptionsSpecifications:
        - PreSharedKey: !Ref VPNPreSharedSecret
  VPNConfigDetailsGenerator:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      Timeout: 15
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: python3.6
      Code:
        ZipFile: |
          import logging
          import boto3
          import xml.etree.ElementTree
          import cfnresponse

          def lambda_handler(event, context):
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              vpn_connection_id = event['ResourceProperties'].get('VPNID', None)
              ec2client = boto3.client('ec2')
              response = ec2client.describe_vpn_connections(VpnConnectionIds=[ vpn_connection_id ])
              tunnelnumber = 1
              vpncfg = {}
              root = xml.etree.ElementTree.fromstring(response['VpnConnections'][0]['CustomerGatewayConfiguration'])
              for cgwConfig in root.findall("ipsec_tunnel"):
                  if tunnelnumber == 1:
                      # Customer Gateway parameters
                      vpncfg['CGWtunnelOutsideAddress1'] = cgwConfig.find("customer_gateway/tunnel_outside_address/ip_address").text
                      vpncfg['CGWtunnelInsideAddress1'] = cgwConfig.find("customer_gateway/tunnel_inside_address/ip_address").text
                      vpncfg['CGWbgpASN1'] = cgwConfig.find("customer_gateway/bgp/asn").text
                       # AWS parameters
                      vpncfg['VPNGWtunnelOutsideAddress1'] = cgwConfig.find("vpn_gateway/tunnel_outside_address/ip_address").text
                      vpncfg['VPNGWtunnelInsideAddress1'] = cgwConfig.find("vpn_gateway/tunnel_inside_address/ip_address").text
                      vpncfg['VPNGWbgpASN1'] = cgwConfig.find("vpn_gateway/bgp/asn").text
                  elif tunnelnumber == 2:
                      # Customer Gateway parameters
                      vpncfg['CGWtunnelOutsideAddress2'] = cgwConfig.find("customer_gateway/tunnel_outside_address/ip_address").text
                      vpncfg['CGWtunnelInsideAddress2'] = cgwConfig.find("customer_gateway/tunnel_inside_address/ip_address").text
                      vpncfg['CGWbgpASN2'] = cgwConfig.find("customer_gateway/bgp/asn").text
                       # AWS parameters
                      vpncfg['VPNGWtunnelOutsideAddress2'] = cgwConfig.find("vpn_gateway/tunnel_outside_address/ip_address").text
                      vpncfg['VPNGWtunnelInsideAddress2'] = cgwConfig.find("vpn_gateway/tunnel_inside_address/ip_address").text
                      vpncfg['VPNGWbgpASN2'] = cgwConfig.find("vpn_gateway/bgp/asn").text
                  tunnelnumber=tunnelnumber+1
              logger.info('vpncfg {}'.format(vpncfg))
              cfnresponse.send(event, context, cfnresponse.SUCCESS, vpncfg)
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: lambda-vpc
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - ec2:DescribeVpnConnections
                Resource:
                  - "*"
  fgt1VPNConfigDetails:
      Type: Custom::VPNConfigDetailsGenerator
      Properties:
        ServiceToken: !GetAtt VPNConfigDetailsGenerator.Arn
        VPNID: !Ref fgt1TGWVPNConnection
  fgt2VPNConfigDetails:
      Type: Custom::VPNConfigDetailsGenerator
      Properties:
        ServiceToken: !GetAtt VPNConfigDetailsGenerator.Arn
        VPNID: !Ref fgt2TGWVPNConnection
  fgt1TGWVPNConfig:
    Type: "AWS::SSM::Parameter"
    Properties:
      Type: "String"
      Tier: Advanced
      Name: "fgt1TGWVPNConfig"
      Value:
        "Fn::Sub":
          - |-
            config vdom
            edit FG-traffic
            config vpn ipsec phase1-interface
            edit "tgw-vpn1"
            set interface "port1"
            set local-gw ${fgtPublicIP}
            set keylife 28800
            set peertype any
            set proposal aes256-sha256
            set dhgrp 2
            set remote-gw ${fgt1VPNConfigDetails.VPNGWtunnelOutsideAddress1}
            set psksecret ${VPNPreSharedSecret}
            set dpd-retryinterval 10
            next
            end
            config vpn ipsec phase2-interface
            edit "tgw-vpn1"
            set phase1name "tgw-vpn1"
            set proposal aes256-sha256
            set dhgrp 2
            set keylifeseconds 3600
            next
            end
            config system interface
            edit "tgw-vpn1"
            set ip ${fgt1VPNConfigDetails.CGWtunnelInsideAddress1} 255.255.255.255
            set remote-ip ${fgt1VPNConfigDetails.VPNGWtunnelInsideAddress1} 255.255.255.255
            next
            end
            config firewall ippool
            edit "cluster-ippool"
            set startip ${fgtPublicIP}
            set endip ${fgtPublicIP}
            next
            end
            config firewall policy
            edit 3
            set name "in-vpn"
            set srcintf "tgw-vpn1"
            set dstintf "port2"
            set srcaddr "all"
            set dstaddr "all"
            set action accept
            set schedule "always"
            set service "ALL"
            set logtraffic all
            set fsso disable
            next
            edit 2
            set name "out-vpn"
            set srcintf "port2"
            set dstintf "tgw-vpn1"
            set srcaddr "all"
            set dstaddr "all"
            set action accept
            set schedule "always"
            set service "ALL"
            set logtraffic all
            set fsso disable
            next
            edit 1
            set name "outbound-all"
            set srcintf "port2"
            set dstintf "port1"
            set srcaddr "all"
            set dstaddr "all"
            set action accept
            set schedule "always"
            set service "ALL"
            set logtraffic all
            set ippool enable
            set poolname "cluster-ippool"
            set nat enable
            next
            end
            config router prefix-list
            edit "pflist-default-route"
            config rule
            edit 1
            set prefix 0.0.0.0 0.0.0.0
            unset ge
            unset le
            next
            end
            next
            edit "pflist-port1-ip"
            config rule
            edit 1
            set prefix ${fgtPublicIP} 255.255.255.255
            unset ge
            unset le
            next
            end
            next
            end
            config router route-map
            edit "rmap-outbound"
            config rule
            edit 1
            set match-ip-address "pflist-default-route"
            next
            edit 2
            set match-ip-address "pflist-port1-ip"
            next
            end
            next
            end
            config router bgp
            set as ${fgt1VPNConfigDetails.CGWbgpASN1}
            set router-id ${fgtPublicIP}
            set ebgp-multipath enable
            set network-import-check disable
            config neighbor
            edit ${fgt1VPNConfigDetails.VPNGWtunnelInsideAddress1}
            set capability-default-originate enable
            set remote-as ${fgt1VPNConfigDetails.VPNGWbgpASN1}
            set route-map-out "rmap-outbound"
            set link-down-failover enable
            next
            end
            config network
            edit 1
            set prefix ${fgtPublicIP} 255.255.255.255
            next
            edit 2
            set prefix ${PrivateZoneSubnetA_CIDRBLOCK}
            next
            end            
          - fgtPublicIP:
               !Select
               - 0
               - !Split
                 - "/"
                 - Fn::ImportValue:
                     !Sub "FGVPC-${FGParentStackName}-FortiGate1PublicIP"
            PrivateZoneSubnetA_CIDRBLOCK:
              Fn::ImportValue:
                !Sub "FGVPC-${VPCParentStackName}-PrivateZoneSubnetA-CIDRBLOCK"


  fgt2TGWVPNConfig:
    Type: "AWS::SSM::Parameter"
    Properties:
      Type: "String"
      Tier: Advanced
      Name: "fgt2TGWVPNConfig"
      Value:
        "Fn::Sub":
          - |-
            config vdom
            edit FG-traffic
            config vpn ipsec phase1-interface
            edit "tgw-vpn1"
            set interface "port1"
            set local-gw ${fgtPublicIP}
            set keylife 28800
            set peertype any
            set proposal aes256-sha256
            set dhgrp 2
            set remote-gw ${fgt2VPNConfigDetails.VPNGWtunnelOutsideAddress1}
            set psksecret ${VPNPreSharedSecret}
            set dpd-retryinterval 10
            next
            end
            config vpn ipsec phase2-interface
            edit "tgw-vpn1"
            set phase1name "tgw-vpn1"
            set proposal aes256-sha256
            set dhgrp 2
            set keylifeseconds 3600
            next
            end
            config system interface
            edit "tgw-vpn1"
            set ip ${fgt2VPNConfigDetails.CGWtunnelInsideAddress1} 255.255.255.255
            set remote-ip ${fgt2VPNConfigDetails.VPNGWtunnelInsideAddress1} 255.255.255.255
            next
            end
            config firewall ippool
            edit "cluster-ippool"
            set startip ${fgtPublicIP}
            set endip ${fgtPublicIP}
            next
            end
            config firewall policy
            edit 3
            set name "in-vpn"
            set srcintf "tgw-vpn1"
            set dstintf "port2"
            set srcaddr "all"
            set dstaddr "all"
            set action accept
            set schedule "always"
            set service "ALL"
            set logtraffic all
            set fsso disable
            next
            edit 2
            set name "out-vpn"
            set srcintf "port2"
            set dstintf "tgw-vpn1"
            set srcaddr "all"
            set dstaddr "all"
            set action accept
            set schedule "always"
            set service "ALL"
            set logtraffic all
            set fsso disable
            next
            edit 1
            set name "outbound-all"
            set srcintf "port2"
            set dstintf "port1"
            set srcaddr "all"
            set dstaddr "all"
            set action accept
            set schedule "always"
            set service "ALL"
            set logtraffic all
            set ippool enable
            set poolname "cluster-ippool"
            set nat enable
            next
            end
            config router prefix-list
            edit "pflist-default-route"
            config rule
            edit 1
            set prefix 0.0.0.0 0.0.0.0
            unset ge
            unset le
            next
            end
            next
            edit "pflist-port1-ip"
            config rule
            edit 1
            set prefix ${fgtPublicIP} 255.255.255.255
            unset ge
            unset le
            next
            end
            next
            end
            config router route-map
            edit "rmap-outbound"
            config rule
            edit 1
            set match-ip-address "pflist-default-route"
            next
            edit 2
            set match-ip-address "pflist-port1-ip"
            next
            end
            next
            end
            config router bgp
            set as ${fgt2VPNConfigDetails.CGWbgpASN1}
            set router-id ${fgtPublicIP}
            set ebgp-multipath enable
            set network-import-check disable
            config neighbor
            edit ${fgt2VPNConfigDetails.VPNGWtunnelInsideAddress1}
            set capability-default-originate enable
            set remote-as ${fgt2VPNConfigDetails.VPNGWbgpASN1}
            set route-map-out "rmap-outbound"
            set link-down-failover enable
            next
            end
            config network
            edit 1
            set prefix ${fgtPublicIP} 255.255.255.255
            next
            edit 2
            set prefix ${PrivateZoneSubnetB_CIDRBLOCK}
            next
            end             
          - fgtPublicIP:
               !Select
               - 0
               - !Split
                 - "/"
                 - Fn::ImportValue:
                     !Sub "FGVPC-${FGParentStackName}-FortiGate2PublicIP"
            PrivateZoneSubnetB_CIDRBLOCK:
              Fn::ImportValue:
                !Sub "FGVPC-${VPCParentStackName}-PrivateZoneSubnetB-CIDRBLOCK"


Outputs:
  fgtVPNBgpAsn:
    Description: BGP Autonomous Sytem Number to use for routing for the VPN to FortiGate Firewalls
    Value: !Ref fgtVPNBgpAsn
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-fgtVPNBgpAsn"
  fgt1CustomerGateway:
    Description: AWS Customer Gateway element representing FGT1 Public IP
    Value: !Ref fgt1CustomerGateway
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-fgt1CustomerGateway"
  fgt2CustomerGateway:
    Description: AWS Customer Gateway element representing FGT2 Public IP
    Value: !Ref fgt2CustomerGateway
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-fgt2CustomerGateway"
  fgt1TGWVPNConnection:
    Description: VPN connection between Transit Gateway and FGT1
    Value: !Ref fgt1TGWVPNConnection
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-fgt1TGWVPNConnection"
  fgt2TGWVPNConnection:
    Description: VPN connection between Transit Gateway and FGT2
    Value: !Ref fgt2TGWVPNConnection
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-fgt2TGWVPNConnection"
  fgt1VPNConfigDetails1:
    Description: First VPN CGW Inside IP Address
    Value: !GetAtt fgt1VPNConfigDetails.CGWtunnelInsideAddress1
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-fgt1VPNConfigDetails1"
  fgt1VPNConfigDetails2:
    Description: Second VPN CGW Inside IP Address
    Value: !GetAtt fgt1VPNConfigDetails.CGWtunnelInsideAddress2
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-fgt1VPNConfigDetails2"
  fgt2VPNConfigDetails1:
    Description: First VPN CGW Inside IP Address
    Value: !GetAtt fgt2VPNConfigDetails.CGWtunnelInsideAddress1
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-fgt2VPNConfigDetails1"
  fgt2VPNConfigDetails2:
    Description: Second VPN CGW Inside IP Address
    Value: !GetAtt fgt2VPNConfigDetails.CGWtunnelInsideAddress2
    Export:
      Name: !Sub "FGVPC-${AWS::StackName}-fgt2VPNConfigDetails2"
