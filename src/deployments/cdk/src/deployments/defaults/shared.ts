import * as cdk from '@aws-cdk/core';
import * as iam from '@aws-cdk/aws-iam';
import * as kms from '@aws-cdk/aws-kms';
import { Bucket } from '@aws-accelerator/cdk-constructs/src/s3';
import { createEncryptionKeyName } from '@aws-accelerator/cdk-accelerator/src/core/accelerator-name-generator';
import { AccountStack } from '../../common/account-stacks';
import { overrideLogicalId } from '../../utils/cdk';

export interface KmsDetails {
  encryptionKey: kms.Key;
  alias: string;
}

export function createDefaultS3Key(props: { accountStack: AccountStack }): KmsDetails {
  const { accountStack } = props;

  const keyAlias = createEncryptionKeyName('Bucket-Key');
  const encryptionKey = new kms.Key(accountStack, 'DefaultKey', {
    alias: `alias/${keyAlias}`,
    description: `Default bucket encryption key`,
  });
  encryptionKey.addToResourcePolicy(
    new iam.PolicyStatement({
      sid: 'Enable IAM User Permissions',
      principals: [new iam.AccountRootPrincipal()],
      actions: ['kms:*'],
      resources: ['*'],
    }),
  );
  return {
    encryptionKey,
    alias: keyAlias,
  };
}

/**
 * Creates a bucket in the account with given accountKey.
 */
export function createDefaultS3Bucket(props: {
  accountStack: AccountStack;
  encryptionKey: kms.Key;
  logRetention: number;
  versioned?: boolean;
}): Bucket {
  const { accountStack, encryptionKey, logRetention, versioned } = props;

  // Generate fixed bucket name so we can do initialize cross-account bucket replication
  const bucket = new Bucket(accountStack, 'DefaultBucket', {
    encryptionKey,
    expirationInDays: logRetention,
    removalPolicy: cdk.RemovalPolicy.RETAIN,
    versioned,
  });

  // Let the bucket name be generated by CloudFormation
  // The generated bucket name is based on the stack name + logical ID + random suffix
  overrideLogicalId(bucket, accountStack.region);

  bucket.encryptionKey?.addToResourcePolicy(
    new iam.PolicyStatement({
      sid: 'Allow AWS services to use the encryption key',
      actions: ['kms:Encrypt', 'kms:Decrypt', 'kms:ReEncrypt*', 'kms:GenerateDataKey*', 'kms:DescribeKey'],
      principals: [
        // TODO Isn't there a better way to grant to all AWS services through a condition?
        new iam.ServicePrincipal('ds.amazonaws.com'),
        new iam.ServicePrincipal('delivery.logs.amazonaws.com'),
      ],
      resources: ['*'],
    }),
  );

  return bucket;
}
